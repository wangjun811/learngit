关机重启注销
		// 立刻进行关机
		shutdown -h now
		// 一分钟后关机
		shutdown -h 1
		// 现在重新启动计算机
		shutdown -r now 
		// 关机，作用和上面一样
		halt
		// 现在重新启动计算机
		reboot
		// 把内存的数据同步到磁盘
		sync

		
用户管理
		// 新增用户，当创建用户成功后， 会自动创建和用户同名的目录，组名和用户名一致
		useradd 用户名

		// 也可以通过 useradd -d 指定目录 新的用户名，给创建的用户指定目录
		useradd -d 指定目录 用户名

		// 删除用户，保留用户家目录
		userdel 用户名

		// 删除用户，并删除用户家目录
		userdel -r 用户名

		// 指定/修改密码，新建了一个用户，没有设置密码的话，密码就是未知数，一般的话:useradd 和passwd是一对一对的出现，建一个用户就得设置这个用户的密码
		passwd 用户名

		// 查询用户信息指令，当用户不存在时，返回无此用户
		id 用户名

		// 切换用户，在操作Linux中，如果当前用户的权限不够，可以通过su - 指令，切换到高权限用户，比如root，从权限高的用户切换到权限低的用户，不需要输入密码，反之需要，当需要返回到原来用户时，使用exit指令
		su - 用户名
		// 返回到原来用户
		exit

		// 查看当前用户、登录用户
		whoami
		who am i

		// 创建用户组，类似于角色，系统可以对有共性的多个用户进行统一的管理
		groupadd 组名

		// 删除用户组
		groupdel 组名

		// 增加用户时直接加上组
		useradd -g 用户组 用户名
		
		// 查看当前登录用户属于哪个组
		groups
		
		// 查看用户属于哪个组
		groups 用户名

		
		
		/etc/passwd 文件
		用户（user）的配置文件，记录用户的各种信息
			每行的含义：用户名:口令:用户标识:组号标识:注释性描述:主目录:登录shell

		/etc/shadow 文件
		口令的配置文件
			每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志
		
		/etc/group 文件
		组（group）的配置文件，记录Linux包含的组的信息
			每行的含义：组名:口令:组标识号:组内用户列表
			
		/etc/inittab
		系统运行级别配置文件
		
		
		
指定运行级别

		运行级别说明：
		0：关机
		1：单用户【找回丢失密码】
		2：多用户状态没有网络服务
		3：多用户状态有网络服务
		4：系统未使用保留给用户
		5：图形界面
		6：系统重启
		
		常用运行级别是3和5，要修改默认的运行级别可改文件
		/etc/inittab的id:3:initdefault:这一行中的数字
		命令：init [0123456]
		
		
如何找回root密码
		思路：进入到单用户模式，然后修改root密码，因为进入单用户模式，root不需要密码就可以登录
		

// 表示change directory，切换目录
cd 

// 回到自己的家目录
cd ~

// 回到当前目录的上一级目录
cd ..


mkdir指令
	mkdir指令用于创建目录(make directory)
		基本语法
			mkdir [选项] 要创建的目录
			
		常用选项
			-p 创建多级目录
			
rmdir指令
	rmdir指令删除空目录
		基本语法
			rmdir [选项] 要删除的空目录
			
		使用细节
			rmdir删除的是空目录，如果目录下有内容时无法删除的
			提示：如果需要删除飞空目录，需要使用 rm -rf 要删除的目录
			
			
touch指令
	touch指令创建空文件
		基本语法
			// 创建一个空文件
			touch 文件名称
			// 创建多个空文件
			touch 文件名称1 文件名称2
			

cp指令【重要】
	cp指令的功能是将给出的文件或目录拷贝到另一文件或目录中
		基本语法
			// 拷贝源文件到指定目录
			cp 文件 目录
			// 拷贝源目录到指定目录
			cp -r 源目录 目录
			// 将源目录中的所有文件或目录拷贝到指定目录
			cp -r 源目录/* 目录
			
		常用选项
			-r : 递归复制整个文件夹
			
		使用细节
			前置覆盖不提示的方法:\cp

rm指令
	rm指令一处文件或目录
		基本语法
			rm [选项] 要删除的文件或目录
		
		常用选项
			-r : 递归删除整个文件夹
			-f : 强制删除不提示
			
mv指令
	mv指令
	
	
	
cat指令
	cat查看文件内容
		基本语法
			cat [选项] 要查看的文件
		
		常用选项
			-n : 显示行号
			// 查看文件内容并显示行号
			cat -n 文件
			
		使用细节
			cat只能浏览文件，而不能修改文件，为了浏览方便，一般会带上 管道命令 | more用来分页显示
			// 分页查看文件内容并显示行号
			cat -n 文件 | more
			
			
more指令
	more指令是一个基于vi编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容
	more指令中内置了若干快捷键，详见操作说明
	
		基本语法
			more 要查看的文件
		
		操作说明
			空格键	代表向下翻一页
			Enter	代表向下翻一行
			q		代表立刻离开more，不再显示该文件内容
			Ctrl+F	向下滚动一屏
			Ctrl+B	返回上一屏
			=		输出当前行的行号
			:f		输出文件名称和当前行的行号
	
less指令
	less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端，
	less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率
	
		基本语法
			less 要查看的文件
			
		操作说明	
			空格键		向下翻动一页
			[pagedown]	向下翻动一页
			[pageup]	向上翻动一页
			/字串		向下搜寻[字串]的功能
			?字串		想上搜寻[字串]的功能
			q			离开less这个程序
			shift+g		移动到最后一行
			

wc指令
	统计文件内容信息（包含行数、单词数、字节数）
	
		基本语法
			wc [选项] 需要统计的文件路径
			
		常用选项
			-l : 表示行数
			-w : 单词数，依照空格来判断单词数量
			-c : 表示bytes，字节数
			
clear/ctrl + L指令
	清除终端中已经存在的命令和结果（信息）
	
		基本语法
			clear 或者快捷键：ctrl + L
		
			
			
>指令和>>指令
	>输出重定向：会将原来的文件的内容覆盖
	>>追加：不会覆盖原来文件的内容，而是追加到文件的末尾
		基本语法
		1）ls -l > 文件			（功能描述：列表的内容写入文件a.txt中（覆盖写））
		2）ls -al >> 文件			（功能描述：列表的内容追加到文件a.txt的末尾）
		3）cat 文件1 > 文件2		（功能描述：将文件1的内容覆盖到文件2）
		4）echo "内容" >> 文件	（功能描述：将内容追加到文件）
		
		
echo指令
	echo输出内容到控制台
		基本语法
			echo [选项] [输出内容]
			
		应用实例
			// 案例：使用echo指令输出环境变量，输出当前的环境路径
			echo $PATH
			// 案例：使用echo指令输出hello world!
			echo hello world!
			
			
head指令
	head用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容
		基本语法
			head 文件		（功能描述：查看文件头10行内容）
			head -n 5 文件	（功能描述：查看文件头5行内容，5可以是任意行数）
			
			
tail指令
	tail用于输出文件中尾部的内容，默认情况下tail指令显示文件的后10行内容
		基本语法
			1）tail 文件		（功能描述：查看文件后10行内容）
			2）tail -n 5 文件	（功能描述：查看文件后5行内容，5可以是任意行数）
			3）tail -f 文件		（功能描述：实时追踪该文档的所有更新）
			
			
ln指令
	软链接也叫符号链接，类似于windows里的快捷方式，主要存放了链接其他文件的路径
		基本语法
			ln -s [源文件或目录] [软链接名]	（功能描述：给源文件创建一个软链接）
			
		应用实例
			// 案例1：在/home目录下创建一个软链接linkToRoot，连接到/root目录
			ln -s /root linkToRoot
			// 案例2：删除软链接linkToRoot，在删除软链接时，后面不要带/
			rm -rf linkToRoot
			
		细节说明
			当我们使用pwd指令查看目录时，仍然看到的是软链接所在目录
		
		
history指令
	查看已经执行过历史命令，也可以执行历史指令
		基本语法
			history		（功能描述：查看已经执行过历史指令）
			
		应用实例
			// 案例1：显示所有的历史命令
			history
			// 案例2：显示最近使用过的10个指令
			history 10
			// 案例3：执行历史编号为5的指令
			!5
				
			
date指令
	显示当前日期
		基本语法
			1）date			（功能描述：显示当前时间）
			2）date +%Y		（功能描述：显示当前年份）
			3）date +%m		（功能描述：显示当前月份）
			4）date +%d		（功能描述：显示当前是哪一天）
			5）date "+%Y-%m-%d %H-%M-%S"	（功能描述：显示年月日时分秒）
			
	设置日期
		基本语法
			date -s 字符串时间
			// 设置系统当前时间
			date -s "2019-04-04 14:51:00"
			

cal指令
	查看日历指令
		基本语法
			cal [选项]		（功能描述：不加选项，显示本月日历）
			
		应用实例
			// 显示当前日历
			cal
			// 显示2019年日历
			cal 2019
			
			
find指令
	find指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端
		基本语法
			find [搜索范围] [选项]
		选项说明
			选项				功能
			-name<文档名称>		按照指定的文件名查找模式查找文件
			-user<用户名>		查找属于指定用户名所有文件
			-size<文件大小>		按照指定的文件大小查找文件
			-type<文档类型>		按照文档的类型进行搜索
			
		应用实例
			1）案例1：按文件名，根据名称查找home目录下的hello.txt文件
			   find /home -name hello.txt
			2) 案例2：按拥有者，查找/opt目录下，用户名称为nobody的文件
			   find /opt -user nobody
			3）案例3：查找整个linux系统下大雨20M的文件(+n 大于 -n小于 n等于)
			   find / -size +20M
			4) 案例4：查找/目录下所有.txt结尾的文件
			   find / -name *.txt
			5）案例5：查找/目录下所有的文件
			   find / -type f
			   
	在使用linux时，经常需要进行文件查找。其中查找的命令主要有find和grep。两个命令是有区的。
			   
		(1)find命令是根据文件的属性进行查找，如文件名，文件大小，所有者，所属组，是否为空，访问时间，修改时间等。 

		(2)grep是根据文件的内容进行查找，会对文件的每一行按照给定的模式(patter)进行匹配查找。
			   
locate指令
	locate指令可以快速定位文件路径，locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件，
	locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻
	
		基本语法
			locate 搜索文件
			
		特别说明
			由于locate指令基于数据库进行查询，所以第一次运行前，必须使用updatedb指令创建locate数据库
			
		应用实例
			案例1：请使用locate指令快速定位hello.txt文件所在目录
			updatedb
			locate hello.txt
			
			
grep指令和管道符号 |
	grep过滤查找，管道符，"|",表示将前一个命令的处理结果输出传递给后面的命令处理
	
		基本语法
			grep [选项] 查找内容 源文件或目录
			
		常用选项
			选项	功能
			-n		显示匹配行及行号
			-i		忽略字母大小写
			
		应用实例
			// 案例1：在hello.txt文件中，查找"yes"所在行，并且显示行号、忽略字母大小写
			cat hello.txt | grep -ni YES
			
			
gzip/gunzip 指令
	gzip用于压缩文件，gunzip用于解压的
	
		基本语法
			gzip文件		（功能描述：压缩文件，只能将文件压缩为*.gzip/gz文件）
			gunzip文件.gz	（功能描述：解压缩文件命令）
			
		应用实例
			// 案例1：gzip压缩，将/home下的hello.txt文件进行压缩
			gzip hello.txt
			// 案例2：gunzip压缩，将/home下的hello.txt.gz文件进行解压缩
			gunzip hello.txt.gz
			
		细节说明
			当我们使用gzip对文件进行压缩后，不会保留原来的文件
			
			
zip/unzip指令
	zip用于压缩文件，unzip用于解压的，这个在项目打包发布中很有用的
	
		基本语法
			zip		[选项] XXX.zip 将要压缩的内容	（功能描述：压缩文件和目录的命令）
			unzip	[选项] XXX.zip （功能描述：解压缩文件）
			
		zip 常用选项
			-r	递归压缩。即压缩目录
			
		unzip 常用选项
			-d<目录>	指定解压后文件的存放目录
			
		应用实例
			// 案例1：将/home下的所有文件进行压缩成mypackage.zip
			zip -r mypackage.zip /home/*
			//案例2：将mypackage.zip解压到/opt/tmp目录下
			unzip -d /opt/tmp mypackage.zip
			
			
tar指令
	tar指令是打包指令，最后打包后的文件是 .tar.gz的文件
	
		基本语法
			tar [选项] XXX.tar.gz 打包的内容	(功能描述：打包目录，压缩后的文件格式.tar.gz)\
			
		选项说明
			-c	产生.tar打包文件
			-v	显示详细信息
			-f	指定压缩后的文件名
			-z	打包同时压缩
			-x	解包.tar文件
			
		应用案例
			//	案例1：压缩多个文件，将/home/a1.txt和/home/a2.txt压缩成a.tar.gz
			tar -zcvf a.tar.gz a1.txt a2.txt
			//	案例2：强/home的文件夹压缩成myhome.tar.gz
			tar -zcvf myhome.tar.gz /home/*
			//	案例3：将a.tart.gz解压到当前目录
			tar -zxvf a.tar.gz
			//	案例4：将myhome.tart.gz解压到/opt/tmp2目录下，指定到的解压目录事先要存在，否则会报错
			tar -zxvf myhome.tar.gz  -C /opt/tmp2
			
			
			
			
			
			
组管理和权限管理
	组基本介绍
		在linux中的每个用户必须属于一个组，不能独立于组外。
		在linux中每个文件有所有者、所在组、其它组的概念
		
		1）所有者
		2）所在组
		3）其它组
		4）改变用户所在的组
		
	
		文件/目录所有者
			一般为文件的创建者，谁创建了该文件，就自然的成为该文件的所有者
			
			查看文件的所有者
			1）指令：ls -ahl
			2）应用实例：创建一个组police，在创建一个用户tom，将同名、放在police组，然后使用tom来创建一个ok.txt文件
			groupadd police
			useradd -g police tom
			passwd tom
			su - tom
			touch ok.txt
			ls -ahl
			
			修改文件所有者
			1）指令：chown 用户名 文件名
			2）应用案例
				要求：使用root创建一个文件apple.txt，然后将其所有者修改成tom
				touch apple.txt
				chown tom apple.txt
				ls -ahl
				
			组的创建
				基本指令
					groupadd 组名
					
				应用实例
					// 创建一个组,monster
					groupadd monster
					
					// 创建一个用户fox，并放入到monster组中
					useradd -g monster fox
					
					
		文件/目录所在组
			当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组
			
			查看文件/目录所在组
				基本指令
					ls -ahl
					
			修改文件所在的组
				基本指令
					chgrp 组名 文件名
					
				应用实例
					// 使用root用户创建文件orange.txt，看看当前这个文件属于哪个组，然后将这个文件所在组，修改到police组
					touch orange.txt
					chgrp police orange.txt
					ls -ahl
					
					
		其它组
			除文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组
			
			
		改变用户所在组
			在添加用户时，可以指定将该用户添加到哪个组中，同样的用root管理权限可以改变某个用户所在的组
			
			改变用户所在组
				1）usermod -g 组名 用户名
				2）usermod -d 目录名 用户名 改变该用户登录的初始目录
				
			应用实例
				// 创建一个土匪组（bandit）将tom这个用户从原来所在的police组，修改到bandit组
				id tom
				groupadd bandit
				usermod -g bandit tom
				id tom
			
			
	
	权限的基本介绍
		ls -l中显示的内容如下：
		-rwxr--r-- 1 tom police 6 Feb 2 09:39 ok.txt
		
		0-9位说明
		1）第0位确定文件类型(d,-,l,c,b)
			-：普通文件
			d：目录
			l：软链接文件
			c：字符设备[键盘、鼠标]
			b：块文件[硬盘]
		2）第1-3位确定所有者（该文件的所有者）拥有该文件的权限。--User
		3）第4-6位确定所属组（同用户组的）拥有该文件的权限。--Group
		4）第7-9位确定其他用户拥有该文件的权限。--Other
		可用数字表示为:r=4,w=2,x=1 因此rwx=4+2+1=7
		
		1：如果是文件，表示硬链接的数，如果是目录，则表示该目录的子目录个数
		tom：用户名
		police：组名
		6：文件大小，如果是目录统一是4096
		Feb 2 09:39：文件最后修改时间
		ok.txt：文件名
		
		
		rwx权限详解
			rwx作用到文件
			1）[r]代表可读(read):可以读取，查看
			2）[w]代表可写(write):可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件
			3）[x]代表可执行(execute):可以被执行
			
			rwx作用到目录
			1）[r]代表可读(read):可以读取，ls查看目录内容
			2）[w]代表可写(write):可以修改，目录内创建+删除+重命名目录
			3）[x]代表可执行(execute):可以进入该目录
			
			
		修改权限-chmod
			基本说明：通过chmod指令，可以修改文件或者目录的权限
			
			第一种方式：+、-、=变更权限
			u:所有者 g:所有组 o:其他人 a:所有人(u、g、o的总和)
			1）chmod u=rwx,g=rx,o=x 文件吗目录名
			2）chmod o+w 文件目录名
			3）chmod a-x 文件目录名
			
				案例演示
					1）给abc文件的所有者读写执行的权限，给所在组读执行权限，给其他组读执行权限
					touch abc
					chmod u=rwx,g=rx,o=rx abc
					ll abc
					2）给abc文件的所有者除去执行的权限，增加组写的权限
					chmod u-x,g+w abc
					3）给abc文件的所有用户添加读的权限
					chmod a+r abc
				
			第二种方式：通过数字变更权限
			r=4 w=2 x=1  rwx=4+2+1=7
			chmod u=rwx,g=rx,o=x 文件目录名
			相当于 chmod 751 文件目录名
			
				案例演示
					// 将abc.txt文件的权限修改成rwxr-xr-x，使用给数字的方式实现
					rwx=4+2+1=7
					r-x=4+1=5
					r-x=4+1=5
					chmod 755 abc.txt
					
		
		修改文件所有者-chown
			基本介绍
				chown newowner file 改变文件的所有者
				chown newowner:newgroup file 改变用户的所有者和所有组
				-R 如果是目录则使其下所有子文件或目录递归生效
				
			案例演示
				1）将abc.txt文件的所有者修改成tom
				chown tom abc.txt
				2）强test目录下所有的文件和目录的所有者都修改成tom
				mkdir kkk
				cd kkk
				touch a.txt b.txt
				ll
				cd ..
				chown -R tom kkk
				
				
		修改文件所在组-chgrp
			基本介绍
				chgrp newgroup file 改变文件的所有组
				
			案例演示
				1）将abc.txt文件的所在组修改成shaolin
				groupadd shaolin
				chgrp shaolin abc.txt
				2）将kkk目录下所有的文件和目录的所在组都修改成shaolin
				chgrp -R shaolin kkk
				
				
				
	最佳实践-警察和土匪游戏
		police，bandit
		jack，jerry：警察
		xh，xq：土匪
		（1）创建组
		groupadd police
		groupadd bandit
		（2）创建用户
		useradd -g police jack
		passwd jack
		useradd -g police jerry
		passwd jerry
		useradd -g bandit xh
		passwd xh
		useradd -g bandit xq
		passwd xq
		（3）jack创建一个文件，自己可以读写，本组人可以读，其它组没任何权限
		su - jack
		touch test.txt
		chmod 640 test.txt
		（4）jack修改该文件，让其他组人可以读，本组人可以读写
		chmod 664 test.txt
		（5）xh投靠警察，看看是否可以读写
		usermod -g police xh
		
		
		
crond任务调度
	crontab进行定时任务的设置
	概述
		任务调度，是指系统在某个时间执行的特定的命令或程序
		任务调度分类：
			1.系统工作：有些重要的工作必须周而复始地执行，如病毒扫描等
			2.个别用户工作：个别用户可能希望执行某些程序，比如对mysql数据库的备份
			
	基本语法
		crontab [选项]
	
	常用选项
		-e 编辑crontab定时任务
		-l 查询crontab任务
		-r 删除当前用户所有的crontab任务
		
	cronb相关指定
		service 愁容restart [重启任务调度]
		
	快速入门
		设置任务调度文件：/etc/crontab
		设置个人任务调度，执行crontab -e 命令：init
		接着输入任务到调度文件
			如：*/1 * * * * ls  -l /etc/ >> /tmp/to.txt
			意思说每小时的每分钟执行ls -/etc/ >> tmp/to.txt
	
	参数细节说明
		5个占位符的说明
		项目		含义					范围
		第一个*		一小时当中的第几分钟	0-59
		第二个*		一天当中的第一个小时	0-23
		第三个*		一个月当中的第几天		1-31
		第四个*		一年当中的第几月		1-12
		第五个*		一周当中的星期几		0-7（0和7都代表星期日）
			
		步骤如下
		1）crontab -e
		2）*/1 * * * * ls -l /etc >> /tpm/to.txt
		3）保存退出
		4）在每一分钟都会自动的调用ls -l /etc >> /tmp/to.txt
		
		
	实用案例
		案例1：每个1分钟，就将当前的日期信息，追加到/tmp/mydate文件中
		1）先编写一个文件/home/mytask1.sh
			date >> /tmp/mydate
		2）给mytash1.sh一个可以执行权限
			chmod 744 /home/mytask1.sh
		3）crontab -e
		4）*/1 * * * * /home/mytask1.sh
		
		案例2：每天凌晨2:00将mysql数据库testdb，备份到文件中mydb.bak
		1）先编写一个文件/home/mytask2.sh
			/user/local/mysql/bin/mysqldump -u root -proot testdb > /tmp/mydb.bak
		2）给mytash2.sh一个可以执行权限
			chmod 744 /home/mytask2.sh
		3）crontab -e
		4）*/1 * * * * /home/mytask2.sh
		
	
			
		
Linux磁盘分区、挂载
	分区基础知识
		1）mbr分区
			1.最多支持四个主分区
			2.系统只能安装在主分区
			3.扩展分区要占一个主分区
			4.MBR最大只支持2TB，但拥有最好的兼容性
		
		2）gtp分区
			1.支持无限多个主分区（但操作系统可能限制，比如windows下最多128个分区）
			2.最大支持18EB的大容量（1EB=1024PB，1PB=1024TB）
			3.windows7 64位以后支持gtp
	
	Linux分区
		原理介绍
			1）Linux来说无论有几个分区，分给哪一些目录使用，它归根结底就只有一个根目录，
			   一个独立且唯一的文件结构，Linux中每个分区都是用来组成整个文件系统的一部分
			2）Linux采用了一种叫"载入"的处理方法，它的整个文件系统中包含了一整套的文件和
			   目录，且讲一个分区和一个目录联系起来，这时要载入的一个分区将使它的存储空间
			   在一个目录下获得
			   
		硬盘说明
			1）Linux硬盘分IDE硬盘和SCSI硬盘，目前基本上是SCSI硬盘
			2）对于IDE硬盘，驱动器标识符为"hdx~"，其中"hd"表明分区所在设备的类型，这里是指IDE硬盘了，
			   "x"为盘号（a为基本盘，b为基本从属盘，c为辅助主盘，d为辅助从属盘），"~"代表分区，
			   前四个分区用数字1到4表示，它们是主分区或扩展分区，从5开始就是逻辑分区。例，hda3表示为
			   第一个IDE硬盘上的第三个主分区或扩展分区，hdb2表示为第二个IDE硬盘上的第二个主分区或裸展分区
			3）对于SCSI硬盘则标识为"sdx~"，SCSI硬盘使用"sd"来表示分区所在设备的类型的，其余则和IDE硬盘的表示方法一样
			
		使用lsblk或lsblk -f指令查看系统的分区和挂载的情况
		
	如何增加一块硬盘
		1）虚拟机添加硬盘
		2）分区		fdisk /dev/sdb
		3）格式化 	mkfs -t ext4 /dev/sdb1
		4）挂载	（临时挂载，重启后就会失效）	先创建一个目录/home/newdisk，挂载 mount /dev/sdb1 /home/newdisk
		5）设置可以自动挂载（永久挂载，当你重启系统，仍然可以挂载到/home/newdisk）
		
	具体的操作步骤整理
		1）虚拟机增加硬盘步骤1
			在【虚拟机】菜单中，选择【设置】，然后设备列表里添加硬盘，然后一路【下一步】，
			中间只有选择磁盘大小的地方需要修改，直到完成，然后重启系统（才能识别）	
		2）虚拟机增加硬盘步骤2
			分区命令 fdisk /dev/sdb
			开始对/sdb分区
				m	显示命令列表
				p	显示磁盘分区 同 fdisk -l
				n	新增分区
				d	删除分区
				w	写入并推出
			说明：开始分区后输入n，新增分区，然后选择p，分区类型为主分区，两次回车默认剩余全部空间，最后输入w写入分区并退出，若不保存退出输入q
		3）虚拟机增加硬盘步骤3
			格式化磁盘
			分区命令：mkfs -t ext4 /dev/sdb1
			其中ext4是分区类型
		4）虚拟机增加硬盘步骤4
			挂载：将一个分区与一个目录联系起来
			mount	设备名称	挂载目录
			例如：mount /dev/sdb1 /home/newdisk
			
			umount	设备名称	或者	挂载目录
			例如：umount /dev/sdb1 或者 umount /home/newdisk
		5）虚拟机增加硬盘步骤5
			永久挂载：通过修改/etc/fstab实现挂载添加完成后执行mount -a即刻生效
			
	磁盘情况查询
		查询系统整体磁盘使用情况
			基本语法
				df -h
				
			应用实例
				查询系统整体磁盘使用情况
				
		查询指定目录的磁盘占用情况
			基本语法
				du -h /目录
				查询指定目录的磁盘占用情况，默认为当前目录
				
					-s 指定目录占用大小汇总
					-h 带计量单位
					-a 含文件
					--max-depth=1 子目录深度
					-c 列出明细的同时，增加汇总值
					
			应用实例
				查询/home目录的磁盘占用情况，深度为1
				du -ach --max-depth=1 /home
				
		磁盘情况-工作实用指令
		1）统计/home文件夹下文件的个数
			// wc是统计个数
			ll /home | grep "^-" | wc -l
		2）统计/home文件夹下目录的个数
			ll /home | grep "^d" | wc -l
		3）统计/home文件夹下文件的个数，包括子文件夹里的
			ll -R /home | grep "^-" | wc -l
		4）统计文件夹下目录的个数，包括子文件夹里的
			ll -R /home | grep "^d" | wc -l
		5）以树状显示目录结构
			// 安装tree指令
			yum install tree
			tree
			
			
	Linux网络配置
	
	
	
	
	
	
	
	Linux进程管理
		显示系统执行的进程
			基本介绍
				ps命令是用来查看目前系统中，有哪些正在执行，以及它们执行的状况，可以不加任何参数
				
				ps显示的信息选项
					字段	说明
					PID		进程识别号
					TTY		终端机号
					TIME	此进程消耗CPU时间
					CMD		正在执行的命令或进程名
				
			基本语法
				// 显示当前终端的所有进程信息
				ps -a
				
				// 以用户的格式显示进程信息
				ps -u
				
				// 显示后台进程运行的参数
				ps -x
				
			ps详解
				1）指令：ps -aux | grep xxx，比如我看看有没有sshd服务
				2）指令说明
					System V展示风格
					USER：用户名称
					PID：进程号
					%CPU：进程占用CPU的百分比
					%MEM：进程占用物理内存的百分比
					VSZ：进程占用的虚拟内存大小（单位：KB）
					RSS：进程占用的物理内存大小（单位：KB）
					TT：终端名称，缩写
					STAT：进程状态，其中S-睡眠，s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级要低的优先级，
						  R-正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止等等
					STARTED：进程的启动时间
					TIME：CPU时间，即进程使用CPU的总时间
					COMMAND：启动进程所用的命令和参数，如果过长会被截断显示
					
			应用实例
				要求：以全格式显示当前所有的进程，查看进程的父进程
					ps -ef 是以全格式显示当前所有的进程
					-e 显示所有进程
					-f 全格式
					ps -ef | grep xxx
						是BSD风格
						UID：用户ID
						PID：进程ID
						PPID：父进程ID
						C：CPU用于计算执行优先级的因子，数值越大，表明CPU是密集型运算，
						   执行优先级会降低，数值越小，表明进程是I/O密集型运算，执行优先级会提高
						STIME：进程启动的时间
						TTY：完整的终端名称
						TIME：CPU时间
						CMD：启动进程所有的名称和参数
						
		top指令
			查看服务器的进程占的资源
			
				基本语法
					top
				
				表头含义：
					PID：进程id；
					USER：该进程对应的用户；
					PR：优先级；
					VIRT：虚拟内存；
					RES：常驻内存；
					SHR：共享内存；
					计算一个进程实际使用的内存 = 常驻内存（RES）- 共享内存（SHR）
					S：表示进程的状态status（sleeping，其中S表示睡眠，R表示运行）；
					%CPU：表示CPU的占用百分比；
					%MEM：表示内存的占用百分比；
					TIME+：执行的时间；
					COMMAND：进程的名称或者路径
					
				在运行top的时候，可以按下方便的快捷键：
					M：表示将结果按照内存（MEM）从高到低进行降序排列；
					P：表示将结果按照CPU使用率从高到低进行降序排列；
					1：当服务器拥有多个cpu的时候可以使用“1”快捷键来切换是否展示显示各个cpu的详细信息；

		
						
		终止进程kill和killall
			介绍
				若是某个进程执行一般需要停止时，或是已消耗了很大的系统资源时，此时可以考虑停止该进程，使用kill命令来完成此项任务
				
			基本语法
				kill [选项] 进程号（功能描述：通过进程号杀死进程）
				killall 进程名称（功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大和变得很慢时很有用）
				
			常用选项
				-9 ：表示强迫进程立即停止
				
			最佳实践
				案例1：踢掉某个非法登录用户
					kill -9 登录用户进程号
				案例2：终止远程登录服务sshd，在适当时候再次重启sshd服务
					// 终止远程登录服务sshd
					ps -ef | grep sshd
					kill -9 sshd进程号
					// 启动sshd服务
					service sshd start
				案例3：终止多个gedit编辑器
					killall gedit
				案例4：强制杀掉一个终端
					ps -ef | grep bash
					kill -9 bash进程号
					
		查看进程树pstree
			基本语法
				pstree [选项] ，可以更加直观的来看进程信息
				
			常用选项
				-p：显示进程的PID
				-u：显示进程的所属用户
				
			应用实例
				案例1：请以树状的形式显示进程的pid
					pstree -p
				案例2：请以树状的形式进程的用户id
					pstree -u
			
		服务（service）管理
			介绍：
				服务（service）本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其它进程的请求，
				比如（mysql，sshd防火墙等），因此我们又称为守护进程，是Linux中非常重要的知识点
				
			service管理指令：
				service 服务名 [start|stop|restart|reload|status]
				在CentOs7.0后不再使用service，而是systemctl
				
			使用案例：
				1）查看当前防火墙状况，关闭防火墙和重启防火墙
					service iptables status
					service iptables stop
					service iptables start
					
			细节讨论：
				1）关闭或者启用防火墙后，立即生效。[telnet测试某个端口即可]
					telnet ip 服务端口
				2）这种方式知识临时生效，当重启系统后，还是回归以前对服务的设置
				3）如果希望设置某个服务自启动或关闭永久生效，要使用chkconfig指令
				
			查看服务名：
				方式1：使用setup -> 系统服务 就可以看到
				方式2：/etc/init.d/服务名称
					// 列出系统有哪些服务
					ls -l /etc/init.d/
				
			服务的运行界别（runlevel）
				查看或者修改默认级别：vi /etc/inittab
				
			开机的流程说明：
				开机 -> BIOS -> /boot -> init进程 -> 运行级别 -> 运行级别对应的服务
				
			chkconfig指令
				介绍：
					通过chkconfig命令可以给各个运行级别设置自启动/关闭
				
				基本语法：
					1）查看服务 chkconfig --list | grep xxx
					2）chkconfig 服务名 --list
					3）chkconfig --level 5 服务名 on/off
					
				应用实例：
					1）案例1：请显示当前系统所有服务的各个运行级别的运行状态
						chkconfig --list
					2）案例2：请查看sshd服务的运行状态
						service sshd status
					3）案例3：将sshd服务在运行级别5下设置为不自动启动，看看有什么效果
						chkconfig --level 5 sshd off
					4）案例4：当运行级别为5时，关闭防火墙
						chkconfig --level 5 iptables off
					5）案例5：在所有运行级别下，关闭防火墙
						chkconfig iptables off
					6）案例6：在所有运行级别下，开启防火墙
						chkconfig iptables on
				
		
	
			   
			
	

