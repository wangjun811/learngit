

DispatchServlet普通rest请求概述
	在浏览器发请求:http://localhost:8080/springmvc/hello
	进入DispatchServlet的doDispatch方法
		1.获取HandlerExecutionChain(该类里面有根据/hello请求路径匹配上的@RequetMapping("/hello")注解对应的方法，称之为handler，还有请求路径对应的拦截器)，
		  获取方式是遍历handlerMappings，调用handlerMapping的getHandler方法获取到，如下对应获取代码，获取到
		  
		  protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {
			for (HandlerMapping hm : this.handlerMappings) {
				if (logger.isTraceEnabled()) {
					logger.trace(
							"Testing handler map [" + hm + "] in DispatcherServlet with name '" + getServletName() + "'");
				}
				HandlerExecutionChain handler = hm.getHandler(request);
				if (handler != null) {
					return handler;
				}
			}
			return null;
		}
		
		2.获取HandlerAdapter,根据HandlerExecutionChain去获取，遍历handlerAdapters，调用handlerAdapter的supports方法，如果handlerAdapter支持传入的handler，
		  则返回对应HandlerAdapter，返回的是RequestMappingHandlerAdapter
		  
		  protected HandlerAdapter getHandlerAdapter(Object handler) throws ServletException {
			for (HandlerAdapter ha : this.handlerAdapters) {
				if (logger.isTraceEnabled()) {
					logger.trace("Testing handler adapter [" + ha + "]");
				}
				if (ha.supports(handler)) {
					return ha;
				}
			}
			throw new ServletException("No adapter for handler [" + handler +
					"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler");
		}

		3.执行该请求对应的拦截器的preHandle方法，在HandlerExecutionChain中遍历执行preHandle方法，如下代码
			boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {
				HandlerInterceptor[] interceptors = getInterceptors();
				if (!ObjectUtils.isEmpty(interceptors)) {
					for (int i = 0; i < interceptors.length; i++) {
						HandlerInterceptor interceptor = interceptors[i];
						if (!interceptor.preHandle(request, response, this.handler)) {
							triggerAfterCompletion(request, response, null);
							return false;
						}
						this.interceptorIndex = i;
					}
				}
				return true;
			}
			
		4.HandlerAdapter执行handle方法，如下代码，该方法会将request中的请求参数进行转换绑定，如果类中有@ModelAttribute注解修饰的方法，则先执行,
		  最后执行handler，并将ModelAndView返回
		  // Actually invoke the handler.
		  mv = ha.handle(processedRequest, response, mappedHandler.getHandler());

		5.执行该请求对应拦截器的postHandle方法，在HandlerExecutionChain中遍历执行postHandle方法
		  mappedHandler.applyPostHandle(processedRequest, response, mv);
		
		6.处理handler运行结果
		  processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);
		  1）判断是否执行有异常，如有则匹配对应的异常ModelAndView
		  2）如果ModelAndView(非异常或异常)不为空，执行下面代码，渲染页面
			 render(mv, request, response);
				a)解析匹配视图，匹配上InternalResourceView
				b)最后调用InternalResourceView的renderMergedOutputModel方法，请求转发到对应页面，如下代码：
				protected void renderMergedOutputModel(
					Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {

					// Expose the model object as request attributes.
					exposeModelAsRequestAttributes(model, request);

					// Expose helpers as request attributes, if any.
					exposeHelpers(request);

					// Determine the path for the request dispatcher.
					String dispatcherPath = prepareForRendering(request, response);

					// Obtain a RequestDispatcher for the target resource (typically a JSP).
					RequestDispatcher rd = getRequestDispatcher(request, dispatcherPath);
					if (rd == null) {
						throw new ServletException("Could not get RequestDispatcher for [" + getUrl() +
								"]: Check that the corresponding file exists within your web application archive!");
					}

					// If already included or response already committed, perform include, else forward.
					if (useInclude(request, response)) {
						response.setContentType(getContentType());
						if (logger.isDebugEnabled()) {
							logger.debug("Including resource [" + getUrl() + "] in InternalResourceView '" + getBeanName() + "'");
						}
						rd.include(request, response);
					}

					else {
						// Note: The forwarded resource is supposed to determine the content type itself.
						if (logger.isDebugEnabled()) {
							logger.debug("Forwarding to resource [" + getUrl() + "] in InternalResourceView '" + getBeanName() + "'");
						}
						rd.forward(request, response);
					}
				}
			
		  3）执行该请求对应拦截器的afterCompletion方法，在HandlerExecutionChain中遍历执行afterCompletion方法
		  
		  
		  
DispatchServlet中对应的配置及属性类概述
	<mvc:default-servlet-handler/>：处理静态资源，配置了后将在SpringMVC上下文中定义一个DefaultServletHttpRequestHandler，
									它会对进入DispatchServlet的请求进行筛查，如果发现是没有经过映射的请求，就将该请求交由
									WEB应用服务器默认的servlet处理，如果不是静态资源请求，才由DispatchServlet处理。
									底层就是添加一个org.springframework.web.servlet.handler.SimpleUrlHandlerMapping，通过该Mapping
									获取到DefaultServletHttpRequestHandler
									
	<mvc:annotation-driven/>：会自动注册RequestMappingHandlerMapping、RequestMappingHandlerAdapter 与ExceptionHandlerExceptionResolver 三个bean；
							  还将提供以下支持： 
								  -支持使用 ConversionService 实例对表单参数进行类型转换 
								  –支持使用 @NumberFormat annotation、@DateTimeFormat –注解完成数据类型的格式化
								  -支持使用 @Valid 注解对 JavaBean 实例进行 JSR 303 验证 –
								  -支持使用 @RequestBody 和 @ResponseBody 注解

	1.springmvc.xml未配置
		<mvc:default-servlet-handler/>
		<mvc:annotation-driven/>
		
		DispatchServlet
		
			handlerAdapters
				org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter
				org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter
				org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter
				
			handlerExceptionResolvers
				org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver
				org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver
				org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver
				
			handlerMappings	
				org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping
				org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping
				
	2.springmvc.xml配置了
		<mvc:default-servlet-handler/>
		未配置
		<mvc:annotation-driven/>
		
		DispatchServlet
		
			handlerAdapters
				org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter
				org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter
				
			handlerExceptionResolvers	
				org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver
				org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver
				org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver
				
			handlerMappings
				org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping
				org.springframework.web.servlet.handler.SimpleUrlHandlerMapping
				
	3.springmvc.xml配置了
		<mvc:default-servlet-handler/>
		<mvc:annotation-driven/>
		
		DispatchServlet
		
			handlerAdapters
				org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter
				org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter
				org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter
				
			handlerExceptionResolvers
				org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver
					注：
						当handler执行抛出异常后，查找抛出异常方法的类里面加了@ExceptionHandler且配置的异常类是抛出异常类，
						如有则匹配上，@ExceptionHandler配置的方法返回ModelAndView，将异常信息放入，设置转发的显示错误页面，如下配置对应除0异常：
						@ExceptionHandler({ArithmeticException.class})
						public ModelAndView handlArithmeticException(Exception ex) {
							System.out.println("出现异常了: " + ex);
							ModelAndView mv = new ModelAndView("error");
							mv.addObject("exception", ex);
							return mv;
						}
						如果没有匹配上，则查找@ControllerAdvice注解配置类下面的@ExceptionHandler配置的方法，匹配方式同上
				org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver
				org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver
				注：
					当加了如下配置，handlerExceptionResolvers会新增org.springframework.web.servlet.handler.SimpleMappingExceptionResolver，
					该类的作用是，当handler执行抛出异常后，查找该类配置中对应的异常，找到对应的页面配置，如抛出数组越界异常，就会匹配转发到error页面，
					且request作用域会携带exception异常，可以在error页面中显示出来
						<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
							<property name="exceptionAttribute" value="exception"></property
							<property name="exceptionMappings">
								<props>
									<prop key="java.lang.ArrayIndexOutOfBoundsException">error</prop>
								</props>
							</property>
						</bean>
				
				
			handlerMappings	
				org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping
				org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping
				org.springframework.web.servlet.handler.SimpleUrlHandlerMapping
			
			
			
			
SpringMVC静态资源请求概述
	配置了
		<mvc:default-servlet-handler/>
		<mvc:annotation-driven/>
		
		示例：
			web项目结构如下：项目名称为springmvc
				webapp
					|--scripts
						|--jquery-1.9.1.min.js
					|--WEB-INF
						|--lib
						|--views
							|--success.jsp
						|--web.xml
					|--abc.html
					|--index.jsp
					
		当前端请求访问abc.html:http://localhost:8080/springmvc/abc.html
			进入DispatchServlet的doDispatch方法
			获取HandlerExecutionChain,遍历Mapping，由于没有RequestMapping配置的路径能映射到，RequestMappingHandlerMapping就匹配不上，BeanNameUrlHandlerMapping也匹配不上，
			最后SimpleUrlHandlerMapping匹配上获取到DefaultServletHttpRequestHandler，最后交由该Handler处理，处理成功跳转到对应页面
			
			


SpringMVC中的/*和/的区别
	< url-pattern > / </ url-pattern >   不会匹配到*.jsp，即：*.jsp不会进入spring的 DispatcherServlet类 。
	< url-pattern > /* </ url-pattern > 会匹配*.jsp，会出现返回jsp视图时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。 
	
	当我在客户端调用URL：/user/list然后返回user.jsp视图，当配置的是/：DispathcherServlet拿到这个请求然后返回对应的controller，
	然后依据Dispather Type为Forward类型转发到user.jsp视图，即就是请求user.jsp视图(/user/user.jsp)，此时Dispather没有拦截/user/user.jsp，
	因为此时你配置的是默认的/，就顺利的交给ModleAndView去处理显示了。
	当配置的是/*：DispathcherServlet拿到这个请求然后返回对应的controller，然后通过Dispather Type通过Forward转发到user.jsp视图，
	即就是请求user.jsp视图(/user/user.jsp)，此时Dispather已经拦截/user/user.jsp，Dispatcher会把他当作Controller去匹配，没有匹配到就会报404错误。

	结论：在配置视图的时候尽量用/这种方式。
	
	
	
	
SpringMVC的Controller方法的返回值大体有两种:
	1. ModelAndView（没有使用@ResponseBody注解）
	2. 直接输出到响应流的数据（使用@ResponseBody注解，没有视图解析的步骤）