git status
	命令可以让我们时刻掌握仓库当前状态
	
vi readme.txt
	编辑readme.txt
	
git add readme.txt
	将readme.txt文件添加到暂存区
	
git add .
	将所有工作区修改的文件添加到暂存区
	
git commit -m 'message'
	将暂存区的内容提交到版本库并添加'message'注释
	
版本回退	
	
	git log
		可以根据log回退版本，每一个版本都有一个commit_id。
		首先Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，
		当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
		
	git reflog
		要重返未来，用git reflog 查看命令历史，以便确定要回到未来的哪个版本
		
	git reset --hard HEAD^
		仓库回退到上一个版本
		
	git reset --hard commit_id
		根据commit_id回退版本，Git允许我们在版本的历史之间穿梭
		
	小结
		HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

		穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

		要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
	

	
工作区、暂存区、版本库
	Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念
	
	工作区（Working Directory）
		就是你在电脑里能看到的目录
		
	版本库（Repository）
		工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
		Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。	
		
		前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：

		第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；

		第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
		
		
撤销修改
	
	git checkout -- readme.txt
		命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
		一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
		一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态
		总之，就是让这个文件回到最近一次git commit或git add时的状态
		
	git checkout .
		功能同上命令，操作所有工作区文件，不包含新增的文件
		
	git reset HEAD readme.txt
		指定暂存区回退文件。git reset命令既可以回退版本，也可以把暂存区的修改会退到工作区。当我们用HEAD时，表示最新的版本。
		
	git reset HEAD .
		回退所有暂存区的文件到工作区
		
	小结
		场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
		

删除文件
	rm test.txt
		这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了
		
	git rm test.txt
	
	git commit -m 'remove test.txt'
		现在，文件就从版本库中被删除了。
		
		
添加远程仓库
	现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作
	目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。

	现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：

	git remote add origin git@github.com:michaelliao/learngit.git

		请千万注意，把上面的michaelliao替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。

		添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。

		下一步，就可以把本地库的所有内容推送到远程库上：

	git push -u origin master

		把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
		由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

	从现在起，只要本地作了提交，就可以通过命令：

	git push origin master
		把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库

	小结
		要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

		关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

		此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
	
	
	从远程库克隆
	
	git clone git@github.com:michaelliao/gitskills.git
	
	小结
		要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

		Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
	
	
分支管理
	分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。

	如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了
	
	分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。
	现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。
	
	git branch
		查看本地分支
		
	git branch -a
		查看本地和远端所有分支
		
	git branch -r
		查看远端分支
		
	git branch <name>
		创建dev分支
	
	git checkout <name>
		切换分支
		
	git checkout -b <name>
		创建+切换分支，git checkout命令加上-b参数表示创建并切换
		
	git merge <name>
		合并某分支到当前分支
		
	git branch -d <name>
		删除本地分支
		
	git branch -D <name>
		如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
		
	git push origin --delete <name>
		删除远端分支
		
	git push origin :<name>
		删除远端分支。这种方式是推送一个空分支到远程库，其实就是删除远程分支
		
	git push origin master

        如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建
		
	git push origin

　　 	如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支 
		
	git push origin <本地分支名>:<远程分支名>
		将本地分支内容推送到远程分支
		
	 git push --force origin 
		git push的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令
	
		
解决冲突

	实用案例：
		准备新的feature1分支，继续我们的新分支开发：
		$ git checkout -b feature1
		
		修改readme.txt最后一行，改为：
		Creating a new branch is quick AND simple.
		
		在feature1分支上提交：
		$ git add readme.txt
		$ git commit -m "AND simple"
		
		切换到master分支：
		$ git checkout master
		
		在master分支上把readme.txt文件的最后一行改为：
		Creating a new branch is quick & simple.
		提交：
		$ git add readme.txt 
		$ git commit -m "& simple"
		
		试图把各自的修改合并起来
		$ git merge feature1
		Auto-merging readme.txt
		CONFLICT (content): Merge conflict in readme.txt
		Automatic merge failed; fix conflicts and then commit the result.
		
		果然冲突了！Git告诉我们，readme.txt文件存在冲突，必须手动解决冲突后再提交。git status也可以告诉我们冲突的文件：

		$ git status
		On branch master
		Your branch is ahead of 'origin/master' by 2 commits.
		  (use "git push" to publish your local commits)

		You have unmerged paths.
		  (fix conflicts and run "git commit")
		  (use "git merge --abort" to abort the merge)

		Unmerged paths:
		  (use "git add <file>..." to mark resolution)

			both modified:   readme.txt

		no changes added to commit (use "git add" and/or "git commit -a")
		
		我们可以直接查看readme.txt的内容：
		Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存：
		Creating a new branch is quick and simple.
		
		再提交：
		$ git add readme.txt 
		$ git commit -m "conflict fixed"
		
		最后，删除feature1分支：
		$ git branch -d feature1
		
		工作完成
		
		
Bug分支（设计stash即贮藏功能）
	软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。

	当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：
	
	$ git status
	On branch dev
	Changes to be committed:
	  (use "git reset HEAD <file>..." to unstage)

		new file:   hello.py

	Changes not staged for commit:
	  (use "git add <file>..." to update what will be committed)
	  (use "git checkout -- <file>..." to discard changes in working directory)

		modified:   readme.txt
		
	并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？
	幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
	
	$ git stash
	Saved working directory and index state WIP on dev: f52c633 add merge
	
	现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。

	首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：

	$ git checkout master
	Switched to branch 'master'
	Your branch is ahead of 'origin/master' by 6 commits.
	  (use "git push" to publish your local commits)

	$ git checkout -b issue-101
	Switched to a new branch 'issue-101'
	现在修复bug，需要把“Git is free software ...”改为“Git is a free software ...”，然后提交：

	$ git add readme.txt 
	$ git commit -m "fix bug 101"
	
	修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：

	$ git checkout master
	
	$ git merge --no-ff -m "merged bug fix 101" issue-101
	
	太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！

	$ git checkout dev
	Switched to branch 'dev'

	$ git status
	On branch dev
	nothing to commit, working tree clean
	工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：

	$ git stash list
	stash@{0}: WIP on dev: f52c633 add merge
	工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
	
	一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

	另一种方式是用git stash pop，恢复的同时把stash内容也删了：

	$ git stash pop
	On branch dev
	Changes to be committed:
	  (use "git reset HEAD <file>..." to unstage)

		new file:   hello.py

	Changes not staged for commit:
	  (use "git add <file>..." to update what will be committed)
	  (use "git checkout -- <file>..." to discard changes in working directory)

		modified:   readme.txt

	Dropped refs/stash@{0} (5d677e2ee266f39ea296182fb2354265b91b3b2a)
	
	再用git stash list查看，就看不到任何stash内容了：

	$ git stash list
	你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：

	$ git stash apply stash@{0}
	
	小结
		修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

		当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
	
		
	
		
	
		
	
	
	
	